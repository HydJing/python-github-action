name: Flask App CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.9' # Centralize Python version for easier management
  IMAGE_NAME: 'flask-app' # Centralize image name

jobs:
  # 1. Linting Job: Ensures code quality and style consistency
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Read-only access to clone the repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies for linting
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black # Install linters

      - name: Run Flake8 Linting
        # Consider removing --exit-zero for stricter enforcement
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

      - name: Run Black Formatter Check
        # Consider removing --check for stricter enforcement (and let it fail if not formatted)
        run: black --check .

  # 2. Static Application Security Testing (SAST) for Source Code
  source-code-security-scan:
    runs-on: ubuntu-latest
    needs: lint # Run security scan after linting
    permissions:
      contents: read # Read-only access for code scanning
      security-events: write # Required for uploading SARIF results (e.g., if using CodeQL)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit Security Scan
        # For production, consider removing '|| true' and 'continue-on-error: true'
        # to fail the build on critical/high issues.
        run: bandit -r . -f json -o bandit_report.json || true
        continue-on-error: true

      - name: Upload Bandit Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit_report.json

  # 3. Dependency Vulnerability Scan (for Python packages)
  dependency-scan:
    runs-on: ubuntu-latest
    needs: source-code-security-scan # Can run in parallel with unit tests, but depends on source
    permissions:
      contents: read # Read-only access to clone the repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Install pip-audit
        run: pip install pip-audit
      - name: Run Dependency Audit
        # Fail the workflow if any vulnerabilities are found. Adjust exit-code as needed.
        run: pip-audit --exit-code 1
        # continue-on-error: false # This is the default, so no need to explicitly set

  # 4. Secrets Scanning (Hardcoded credentials)
  secrets-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Read-only access to clone the repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Gitleaks Scan
        # This action fails the job if secrets are detected by default.
        uses: zricethezav/gitleaks-action@v2
        # Consider adding a .gitleaks.toml for custom rules or ignoring specific paths.

  # 5. Unit Tests Job: Validates application logic
  unit-tests:
    runs-on: ubuntu-latest
    needs: [lint, source-code-security-scan, dependency-scan, secrets-scan] # All pre-checks should pass
    permissions:
      contents: read # Read-only access to clone the repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }} # Use env variable for consistency

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies for tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov # Install pytest and coverage tool

      - name: Run Unit Tests with Coverage
        run: pytest --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage report artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
  # 6. Mutation Testing
  mutation-tests:
    runs-on: ubuntu-latest
    needs: unit-tests # Needs successful unit tests to be meaningful
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies for mutation testing
        run: |
          pip install -r requirements.txt
          pip install mutmut
      - name: Run Mutation Tests
        # Configure mutmut to exit with a non-zero code if the mutation score is too low.
        # Example: --cut-off 90 will fail if score is below 90%
        run: mutmut run --paths-to-mutate "app/" --tests-dir "tests/" --cut-off 90 || true # Adjust app/ and tests/ paths
        continue-on-error: true # Consider changing to false for strict quality gate


  # 7. Build and Push Docker Image to Container Registry
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: unit-tests # Only build/push if unit tests pass
    permissions:
      contents: read # For checking out code
      packages: write # Required to push to GitHub Container Registry (ghcr.io)
      id-token: write # Required for OIDC if authenticating to other cloud registries
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # If using Docker Hub:
          # username: ${{ secrets.DOCKER_USERNAME }}
          # password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=long

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  
  # 8. Docker Image Vulnerability Scan (DAST for containers)
  docker-image-security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image # Scan the image after it's built and pushed
    permissions:
      contents: read # To checkout code (if Trivy needs it for context)
      packages: read # To pull the image from ghcr.io
    steps:
      - name: Checkout code (optional, only if Trivy needs context from repo files)
        uses: actions/checkout@v4

      - name: Run Trivy Docker Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'table'
          output: 'trivy-results.txt'
          # For production, set exit-code to '1' and remove continue-on-error for strictness
          exit-code: '0' # Do not fail the workflow on vulnerabilities, just report them
          severity: 'HIGH,CRITICAL' # Only report high and critical vulnerabilities
          vuln-type: 'os,library'

      - name: Upload Trivy Scan Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-security-report
          path: trivy-results.txt

  # 9. Software Bill of Materials (SBOM) Generation
  generate-sbom:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image # Generate SBOM for the built image
    permissions:
      contents: read # To checkout code
      packages: read # To pull image for SBOM generation
    steps:
      - name: Generate SBOM with Syft
        uses: anchore/syft-action@v0.12.0 # Check for latest version on marketplace
        with:
          image: 'ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          output: 'syft-sbom.spdx.json' # Standard SPDX format
          format: 'spdx-json'
      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-report
          path: syft-sbom.spdx.json

  # 10. Deployment to Staging Environment
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: [docker-image-security-scan, generate-sbom] # Deploy only if security scans & SBOM pass
    environment:
      name: staging
      url: https://your-staging-app.example.com # Replace with your actual staging URL
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-staging # Ensures only one staging deployment per branch
      cancel-in-progress: true # Cancels any previous run in this group if a new one starts
    permissions:
      contents: read # To checkout code (if deployment script needs it)
      id-token: write # For OIDC authentication to cloud providers (recommended)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Example: Configure AWS Credentials using OIDC (replace with your cloud provider)
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::123456789012:role/MyGitHubActionsStagingRole
      #     aws-region: us-east-1

      - name: Deploy to Staging Environment
        run: |
          echo "Deploying to staging..."
          # Pull the exact image from GHCR that passed all checks
          docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # Add your actual deployment commands here.
          # Example for Kubernetes:
          # kubectl apply -f kubernetes/staging-deployment.yaml
          # Or for ECS/EC2/Azure App Service:
          # aws ecs update-service --cluster my-cluster --service my-staging-service --force-new-deployment
          # az webapp deployment container config --name my-app-staging --resource-group my-rg --docker-image ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "Staging deployment complete. Access at ${{ env.ACTUAL_STAGING_URL }}"
        env:
          ACTUAL_STAGING_URL: https://your-staging-app.example.com
          # Add environment-specific secrets here for cloud credentials if not using OIDC
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}

  # 11. Staging Smoke Test
  staging-smoke-test:
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    environment: staging # Associate with the staging environment
    permissions:
      contents: read
    steps:
      - name: Install HTTPX for simple testing
        run: pip install httpx
      - name: Run Basic Health Check
        run: |
          STAGING_URL="${{ vars.STAGING_URL || 'https://your-staging-app.example.com' }}"
          # Simple GET request, check status code and basic response time
          RESPONSE=$(python -c "
          import httpx
          import time
          start_time = time.time()
          try:
              response = httpx.get('$STAGING_URL/health', timeout=10) # Assuming a /health endpoint
              response.raise_for_status() # Raise an exception for HTTP errors (4xx or 5xx)
              duration = (time.time() - start_time) * 1000 # milliseconds
              print(f'Health check to {response.url} successful. Took {duration:.2f}ms. Status: {response.status_code}')
              if duration > 500: # Fail if response time is too high
                  print('Health check response time is too slow!')
                  exit(1)
          except httpx.RequestError as exc:
              print(f'An error occurred while requesting {exc.request.url!r}: {exc}')
              exit(1)
          except httpx.HTTPStatusError as exc:
              print(f'Error response {exc.response.status_code} while requesting {exc.request.url!r}: {exc}')
              exit(1)
          ")
          echo "$RESPONSE"
        env:
          # Use the actual staging URL that was deployed to
          ACTUAL_STAGING_URL: ${{ vars.STAGING_URL || 'https://your-staging-app.example.com' }}



  # 12. Deployment to Production Environment
  deploy-to-production:
    runs-on: ubuntu-latest
    needs: deploy-to-staging # Only deploy to production after successful staging deployment
    environment:
      name: production
      url: https://your-production-app.example.com # Replace with your actual production URL
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-production # Ensures only one production deployment
      cancel-in-progress: true
    permissions:
      contents: read # To checkout code (if deployment script needs it)
      id-token: write # For OIDC authentication to cloud providers (recommended)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Example: Configure AWS Credentials using OIDC (replace with your cloud provider)
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::123456789012:role/MyGitHubActionsProductionRole
      #     aws-region: us-east-1

      - name: Deploy to Production Environment
        run: |
          echo "Deploying to production..."
          # Pull the exact image from GHCR that was deployed to staging
          docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # Add your actual production deployment commands here.
          # Ensure this pulls the exact same image and uses a robust deployment strategy (e.g., Blue/Green, Canary).
          echo "Production deployment complete. Access at ${{ env.ACTUAL_PROD_URL }}"
        env:
          ACTUAL_PROD_URL: https://your-production-app.example.com
          # Add environment-specific secrets here for cloud credentials if not using OIDC
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}

  # 14. Notification on Pipeline Failure
  notify-on-failure:
    runs-on: ubuntu-latest
    needs:
      - lint
      - source-code-security-scan
      - dependency-scan
      - secrets-scan
      - unit-tests
      - build-and-push-docker-image
      - docker-image-security-scan
      - generate-sbom
      - deploy-to-staging
      - deploy-to-production
    if: failure()
    permissions:
      contents: read # Basic read for context
    steps:
      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: '#devops-alerts'
          SLACK_COLOR: 'danger'
          SLACK_MESSAGE: "CI/CD Pipeline failed for ${{ github.repository }} on commit `${{ github.sha }}`. Check details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SLACK_USERNAME: 'GitHub Actions Bot'

  # 15. Notification on Production Deployment Success (Optional, but good for visibility)
  notify-on-success:
    runs-on: ubuntu-latest
    needs: deploy-to-production # Only trigger after a successful production deployment
    if: success()
    permissions:
      contents: read # Basic read for context
    steps:
      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: '#devops-releases' # Dedicated channel for releases
          SLACK_COLOR: 'good'
          SLACK_MESSAGE: "🚀 Production deployment successful for ${{ github.repository }}! Commit: `${{ github.sha }}`. Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Access: https://your-production-app.example.com"
          SLACK_USERNAME: 'GitHub Actions Bot'
