name: Flask App CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.9' # Centralize Python version for easier management
  IMAGE_NAME: 'flask-app' # Centralize image name
  
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies for linting
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black # Install linters

      - name: Run Flake8 Linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        # `exit-zero` allows the workflow to pass even with linting warnings,
        # but the statistics output will clearly show issues.
        # For stricter enforcement, remove `exit-zero`.

      - name: Run Black Formatter Check (optional, but recommended)
        run: black --check .
        # Use `--diff` if you want to see differences without failing
        # For strict enforcement, remove `--diff` and let it fail if not formatted.

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify your Python version

      - name: Install Python dependencies for tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest # Install pytest for running tests

      - name: Run Unit Tests
        run: pytest

  source-code-security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify your Python version

      - name: Install Python dependencies for Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit # Install Bandit for static analysis

      - name: Run Bandit Security Scan
        run: bandit -r . -ll -f json -o bandit_report.json || true
        continue-on-error: true # Allow the workflow to proceed even if security issues are found

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit_report.json

  build-docker-image:
    runs-on: ubuntu-latest
    needs: unit-tests # Only build if unit tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t flask-app-image .

      - name: Save Docker Image to Tar
        run: docker save flask-app-image -o flask-app-image.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-artifact
          path: flask-app-image.tar
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: [source-code-security-scan] # Only build/push if previous steps (lint, test, static scan) pass
    permissions:
      contents: read # For checking out code
      packages: write # Required to push to GitHub Container Registry (ghcr.io)
      id-token: write # Required for OIDC if authenticating to other cloud registries
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # For other registries (e.g., Docker Hub), use:
          # username: ${{ secrets.DOCKER_USERNAME }}
          # password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }} # 'latest' only on main branch pushes
            type=sha,format=long # Tag with full commit SHA

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Cache Docker layers using GitHub Actions cache
          cache-to: type=gha,mode=max

  docker-image-security-scan:
    runs-on: ubuntu-latest
    needs: build-docker-image # Only scan image if it was successfully built
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-artifact

      - name: Load Docker Image from Tar
        run: docker load -i flask-app-image.tar

      - name: Run Trivy Docker Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'flask-app-image'
          format: 'table'
          output: 'trivy-results.txt'
          exit-code: '0' # Do not fail the workflow on vulnerabilities, just report them

      - name: Upload Trivy Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-security-report
          path: trivy-results.txt
